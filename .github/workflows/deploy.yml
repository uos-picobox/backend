name: PicoBox Backend CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: SCP JAR to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "build/libs/picobox-*.jar"
          target: "/home/${{ secrets.EC2_USERNAME }}/"
          overwrite: true

      - name: Execute deployment script on EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: |
            ENV_FILE_CONTENT_FROM_SECRET: ${{ secrets.DOT_ENV_CONTENTS }}
          script: |
            set -e
            
            echo "--- EC2에서 ENV_FILE_CONTENT_FROM_SECRET 변수 내용 확인 시작 ---"
            echo "변수 내용 미리보기 (첫 50자): $(echo "$ENV_FILE_CONTENT_FROM_SECRET" | cut -c1-50)"
            echo "변수 전체 길이: ${#ENV_FILE_CONTENT_FROM_SECRET}"
            echo "전체 변수 내용:"
            echo "$ENV_FILE_CONTENT_FROM_SECRET"
            echo "--- EC2에서 ENV_FILE_CONTENT_FROM_SECRET 변수 내용 확인 끝 ---"

            if [ -z "$ENV_FILE_CONTENT_FROM_SECRET" ]; then
              echo "오류: EC2 스크립트 내에서 ENV_FILE_CONTENT_FROM_SECRET 변수가 비어있습니다!"
              echo "GitHub Secret 설정이나, Action의 envs 전달 방식을 확인해야 합니다."
              exit 1
            fi
            
            EC2_HOME_DIR="/home/${{ secrets.EC2_USERNAME }}"
            ENV_FILE_PATH="$EC2_HOME_DIR/.env"
            JAR_SOURCE_DIR_ON_EC2="$EC2_HOME_DIR/build/libs"
            FINAL_TARGET_JAR_PATH="$EC2_HOME_DIR/app.jar"
            JAR_FILE_PATTERN="picobox-*.jar"
            
            echo "--- Creating/Updating environment file at $ENV_FILE_PATH from a single GitHub Secret ---"
            printf '%s\n' "$ENV_FILE_CONTENT_FROM_SECRET" > "$ENV_FILE_PATH"
            chmod 600 "$ENV_FILE_PATH"
            echo "Environment file successfully created/updated at $ENV_FILE_PATH."
            
            echo "--- Navigating to JAR directory on EC2: $JAR_SOURCE_DIR_ON_EC2 ---"
            cd "$JAR_SOURCE_DIR_ON_EC2"
            
            echo "--- Locating newly copied JAR file (pattern: $JAR_FILE_PATTERN) in $PWD ---"
            COPIED_JAR_NAME=$(ls -t $JAR_FILE_PATTERN 2>/dev/null | grep -v -- '-plain\.jar$' | head -n 1)
            
            if [ -z "$COPIED_JAR_NAME" ]; then
              echo "Error: JAR file matching '$JAR_FILE_PATTERN' not found in $PWD after SCP."
              echo "Listing contents of $PWD:"
              ls -la
              echo "Listing contents of $EC2_HOME_DIR (parent home directory):"
              ls -la "$EC2_HOME_DIR"
              exit 1
            fi
            echo "Found JAR in $PWD: $COPIED_JAR_NAME"
            
            echo "--- Preparing to move $COPIED_JAR_NAME to $FINAL_TARGET_JAR_PATH ---"

            if [ -f "$FINAL_TARGET_JAR_PATH" ]; then
              echo "Removing existing $FINAL_TARGET_JAR_PATH"
              rm -f "$FINAL_TARGET_JAR_PATH"
            fi
            echo "Moving $COPIED_JAR_NAME to $FINAL_TARGET_JAR_PATH"
            mv "$COPIED_JAR_NAME" "$FINAL_TARGET_JAR_PATH"
            
            echo "--- Restarting picobox-backend service ---"
            sudo systemctl restart picobox-backend.service
            
            echo "--- Waiting for service to start (20 seconds) ---"
            sleep 20
            
            echo "--- Checking picobox-backend service status ---"
            sudo systemctl status picobox-backend.service || true 
            
            echo "--- Tailing application log (last 30 lines, if exists) ---"
            if [ -f "$EC2_HOME_DIR/app.log" ]; then
              tail -n 30 "$EC2_HOME_DIR/app.log"
            else
              echo "Log file $EC2_HOME_DIR/app.log not found."
            fi